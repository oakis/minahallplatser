// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should match snapshot 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ResetPassword
    email="abc@123.com"
    error="An error message"
    loading={false}
    resetRoute={
      [MockFunction] {
        "calls": Array [
          Array [],
        ],
      }
    }
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <View
        style={
          Object {
            "alignItems": "center",
            "flex": 1,
            "flexDirection": "column",
            "justifyContent": "center",
            "marginLeft": 10,
            "marginRight": 10,
          }
        }
      >
        <Message
          message="An error message"
          type="danger"
        />
        <Input
          icon="ios-mail"
          keyboardType="email-address"
          onChangeText={[Function]}
          placeholder="din@email.se"
          returnKeyType="next"
          value="abc@123.com"
        />
        <Button
          color="primary"
          label="Återställ lösenord"
          loading={false}
          onPress={[Function]}
          uppercase={true}
        />
      </View>,
      "onPress": [Function],
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <Message
            message="An error message"
            type="danger"
          />,
          <Input
            icon="ios-mail"
            keyboardType="email-address"
            onChangeText={[Function]}
            placeholder="din@email.se"
            returnKeyType="next"
            value="abc@123.com"
          />,
          <Button
            color="primary"
            label="Återställ lösenord"
            loading={false}
            onPress={[Function]}
            uppercase={true}
          />,
        ],
        "style": Object {
          "alignItems": "center",
          "flex": 1,
          "flexDirection": "column",
          "justifyContent": "center",
          "marginLeft": 10,
          "marginRight": 10,
        },
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "message": "An error message",
            "type": "danger",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "icon": "ios-mail",
            "keyboardType": "email-address",
            "onChangeText": [Function],
            "placeholder": "din@email.se",
            "returnKeyType": "next",
            "value": "abc@123.com",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "color": "primary",
            "label": "Återställ lösenord",
            "loading": false,
            "onPress": [Function],
            "uppercase": true,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <View
          style={
            Object {
              "alignItems": "center",
              "flex": 1,
              "flexDirection": "column",
              "justifyContent": "center",
              "marginLeft": 10,
              "marginRight": 10,
            }
          }
        >
          <Message
            message="An error message"
            type="danger"
          />
          <Input
            icon="ios-mail"
            keyboardType="email-address"
            onChangeText={[Function]}
            placeholder="din@email.se"
            returnKeyType="next"
            value="abc@123.com"
          />
          <Button
            color="primary"
            label="Återställ lösenord"
            loading={false}
            onPress={[Function]}
            uppercase={true}
          />
        </View>,
        "onPress": [Function],
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <Message
              message="An error message"
              type="danger"
            />,
            <Input
              icon="ios-mail"
              keyboardType="email-address"
              onChangeText={[Function]}
              placeholder="din@email.se"
              returnKeyType="next"
              value="abc@123.com"
            />,
            <Button
              color="primary"
              label="Återställ lösenord"
              loading={false}
              onPress={[Function]}
              uppercase={true}
            />,
          ],
          "style": Object {
            "alignItems": "center",
            "flex": 1,
            "flexDirection": "column",
            "justifyContent": "center",
            "marginLeft": 10,
            "marginRight": 10,
          },
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "message": "An error message",
              "type": "danger",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "icon": "ios-mail",
              "keyboardType": "email-address",
              "onChangeText": [Function],
              "placeholder": "din@email.se",
              "returnKeyType": "next",
              "value": "abc@123.com",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "color": "primary",
              "label": "Återställ lösenord",
              "loading": false,
              "onPress": [Function],
              "uppercase": true,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
